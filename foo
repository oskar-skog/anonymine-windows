#!/bin/bash

usage ()
{
    echo "Usage: ./foo {admin|user} {install|uninstall|update}" > /dev/stderr
    exit 1
}

# Globals
#       dependencies
#       self_mode
#       setup_flags
#       mkshortcut_flags


ask ()
{
    while true ; do
        read -p "<<< $1? (yes/no): " answer
        if [ -n "$(echo $answer | grep -E '^[Yy]([Ee][Ss])?$')" ]; then
            return 0
        fi
        if [ -n "$(echo $answer | grep -E '^[Nn][Oo]?$')" ]; then
            return 1
        fi
    done
}


error ()
{
    while [ $# -gt 0 ]; do
        echo "<<error>> $1" > /dev/stderr
        shift
    done
}


fatal ()
{
    while [ $# -gt 0 ]; do
        echo "<<fatal>> $1" > /dev/stderr
        shift
    done
    echo 'Execution stopped due to fatal error.' > /dev/stderr
    # Terminal's gonna go poof!
    while ! ask "Quit"; do
        error "No is not an option"
    done
    exit 1
}


# Wrapper
cyg_setup ()
{
    /setup.exe -q "$setup_flags" -R "$(cygpath --windows /)" $@
}


update ()
{
    echo >> log; echo >> log; echo >> log; echo >> log; echo >> log;
    echo "Updating anonymine..." >> log; date >> log;
    
    cd anonymine
    while true; do
        # Update and log
        { git pull && ./configure -v && make && make install && break;
        } 2>&1 | tee -a ../log
        # Not reached, hopefully
        error "Failed to update"
        ask "Fix manually" && {
            echo "Exit when you're done.";
            script -a ../log;
            ask "Fixed it" && break;
        }
        ask "Retry" && continue
        echo "Failed to update" >> ../log
        fatal "Failed to update"
    done
    cd ..
}


uninstall ()
{
    cd anonymine
    make uninstall
    cd ..
    rm -rf anonymine
    
    for dependency in $dependencies; do
        ask "Uninstall $dependency" && cyg_setup -x "$dependency"
    done
    
    ask "Uninstall Cygwin" && /setup.exe -R "$(cygpath --windows /)"
}


install ()
{
    shortcut_wrap ()
    {
        # {-P|-D} name cmd
        
        # mkshortcut [-A] {-P|-D} -n <name> -a "-lc <command>" \
        # -w <working_directory> -i <icon> /bin/bash.exe
        
        # Command: /bin/bash.exe -lc "<command>"
        
        mkshortcut "$mkshortcut_flags" "$1" -n "$2" -a "-lc '$3'" \
            -w "$(pwd)" -i "$(pwd)/icon.ico" /bin/bash.exe
    }
    
    # Get configuration before doing time consuming work.
    shortcut_d=0
    shortcut_m=0
    maintenance_d=0
    maintenance_m=0
    ask "Desktop shortcut" && shortcut_d=1
    ask "Menu shortcut" && shortcut_m=1
    ask "Desktop shortcut for update and uninstall" && maintenance_d=1
    ask "Menu shortcut for update and uninstall" && maintenance_m=1
    
    echo >> log; echo >> log; echo >> log; echo >> log; echo >> log
    echo "Installing Anonymine..." >> log; date >> log
    # Dependencies:
    for dependency in $dependencies; do
        cyg_setup -P "$dependency" 2>&1 | tee -a log
    done
    # Try to clone Anonymine
    success=0
    { git clone https://github.com/oskar-skog/anonymine.git && success=1;
    } 2>&1 | tee -a log
    if [ $success -eq 0 ]; then
        echo "Could not download Anonymine." >> log;
        fatal "Could not download Anonymine.";
    fi
    # update does ./configure && make && make install
    update
    
    # Create those shortcuts.
    if [ $shortcut_d -ne 0 ]; then
        shortcut_wrap -D "Anonymine" "anonymine"
    fi
    if [ $shortcut_m -ne 0 ]; then
        shortcut_wrap -P "Anonymine" "anonymine"
    fi
    if [ $maintenance_d -ne 0 ]; then
        shortcut_wrap -D "Update Anonymine" "./foo $self_mode update"
        shortcut_wrap -D "Uninstall Anonymine" "./foo $self_mode uninstall"
    fi
    if [ $maintenance_m -ne 0 ]; then
        shortcut_wrap -P "Update Anonymine" "./foo $self_mode update"
        shortcut_wrap -P "Uninstall Anonymine" "./foo $self_mode uninstall"
    fi
}


main ()
{
    dependencies="git make python"
    [ $# -ne 2 ] && usage
    case "$1" in
        user)
            setup_flags="-B"
            mkshortcut_flags=""
            self_mode="user"
            ;;
        admin)
            setup_flags="--wait"
            mkshortcut_flags="-A"
            self_mode="admin"
            ;;
        *)
            usage
            ;;
    esac
    case "$2" in
        install)
            install
            ;;
        update)
            update
            ;;
        uninstall)
            uninstall
            ;;
        *)
            usage
    esac
}


main "$@"
